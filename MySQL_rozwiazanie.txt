0 Podstawowe
01. Wy³¹czenie bezpiecznego modu 
SET SQL_SAFE_UPDATES = 0;
02. Stworzenie bazy danych o nazwie Wypozyczalnia;
Create DATABASE Wypozyczalnia;
02.U¿ycie bazy danych o nazwie Wypozyczalnia
USE Wypozyczalnia;
03. Tworzenie tabeli przykladowe tworzenie tabeli pracownik
CREATE TABLE pracownik( id int auto_increment, imie varchar(20), nazwisko varchar(20), dzial(int), zarobki int, primary key(id) );
04. Pokazanie tabeli
SHOW TABLES; 
05.Uzupelnienie jednego rekordu pracownik
INSERT INTO pracownik VALUES(null, 'Jan', 'Nowak',1,2500);
06. Pokazanie struktury tabeli pracownik
DESC pracownik;
07. Usuniêcie tabeli
DROP TABLE pracownik;

1 Projekcja wyników zapytañ(SELECT ... FROM ...)
1.1 SELECT * FROM pracownik;
1.2 SELECT imie FROM pracownik;
1.3 SELECT imie, nazwisko, dzial FROM pracownik;

2 Sortowanie wyników zapytañ (ORDER BY)
2.1 SELECT imie, nazwisko, dzial, pensja FROM pracownik ORDER BY pensja DESC;
2.2 SELECT imie, nazwisko FROM pracownik ORDER BY nazwisko,imie ASC;
2.3 SELECT nazwisko, dzial, stanowisko FROM pracownik ORDER BY dzial ASC, stanowisko DESC;

3.Unikatowe wyniki zapytañ (DISTINCT)
3.1 SELECT DISTINCT dzial FROM pracownik;
3.2 SELECT DISTINCT dzial, stanowisko FROM pracownik;
3.3 SELECT DISTINCT dzial, stanowisko FROM pracownik ORDER BY dzial DESC, stanowisko DESC;

4. Selekcja wyników zapytañ (WHERE)
4.1 SELECT imie, nazwisko FROM pracownik WHERE imie="Jan";
4.2 SELECT imie, nazwisko FROM pracownik WHERE stanowisko="sprzedawca";
4.3 SELECT imie, nazwisko, pensja FROM pracownik WHERE pensja > 1500 GROUP BY pensja DESC;

5.Warunki z³o¿one (AND, OR, NOT)
5.1 SELECT imie, nazwisko, dzial, stanowisko FROM pracownik WHERE dzial="obsluga klienta" AND stanowisko="sprzedawca";
5.2 SELECT imie, nazwisko, dzial, stanowisko FROM pracownik WHERE dzial="techniczny" AND (stanowisko="kierownik" OR stanowisko="mechanik");
5.3 SELECT * FROM samochod WHERE marka !="fiat" AND marka !="ford";

6.Predykat IN
6.1 SELECT * FROM samochod WHERE marka IN ("mercedes", "seat", "opel");
6.2 SELECT imie, nazwisko, data_zatr FROM pracownik WHERE imie IN ("Anna", "Marzena", "Alicja");
6.3 SELECT imie, nazwisko, miasto FROM klient WHERE miasto NOT IN ("Warszawa", "Wroclaw");

7 Predykat LIKE
7.1 SELECT imie, nazwisko FROM klient WHERE nazwisko LIKE "%k%";
7.2 SELECT imie, nazwisko FROM klient WHERE nazwisko LIKE "D%ski";
7.3 SELECT imie, nazwisko FROM klient WHERE nazwisko LIKE "_o%" OR nazwisko LIKE "_a%" ;

8 Predykat BETWEEN
8.1 SELECT * FROM samochod WHERE poj_silnika BETWEEN 1100 AND 1600;
8.2 SELECT * FROM pracownik WHERE data_zatr BETWEEN "1997-01-01" AND "1997-12-31";
8.3 SELECT * FROM samochod WHERE przebieg BETWEEN 10000 AND 20000 OR przebieg BETWEEN 30000 AND 40000;


9 Wartoœæ NULL
9.1 SELECT * FROM pracownik WHERE dodatek IS NULL;
9.2 SELECT * FROM klient WHERE nr_karty_kredyt IS NOT NULL;
9.3 SELECT imie, nazwisko, COALESCE(dodatek,'0') as dodatek FROM pracownik ;

10 Kolumny wyliczeniowe (COALESCE)
10.1 SELECT imie, nazwisko, pensja, COALESCE(dodatek,'0') AS dodatek, pensja+COALESCE(dodatek,0) AS do_zaplaty FROM pracownik ;
10.2 SELECT imie, nazwisko, ROUND(1.5*pensja,2) AS nowa_pensja FROM pracownik;
10.3 SELECT imie, nazwisko,  ROUND(0.01*( pensja+COALESCE(dodatek,0) ),2) AS procent_zarobki FROM pracownik ;

11 Z³¹czenia wewnêtrzne dwóch tabel
11.1(data_wyp nie moze miec wartosci null) SELECT s.id, s.marka, s.typ, w.data_wyp, w.data_odd FROM samochod s JOIN wypozyczenie w ON s.id = w.id_samochod WHERE w.data_odd IS NULL;
11.1a(data_wyp moze miec wartosc null) SELECT s.id, s.marka, s.typ, w.data_wyp, w.data_odd FROM samochod s LEFT JOIN wypozyczenie w ON s.id = w.id_samochod WHERE w.data_odd IS NULL;
11.2 SELECT k.imie, k.nazwisko, s.id AS id_samochodu, w.data_wyp, w.data_odd FROM wypozyczenie w
	INNER JOIN klient k ON w.id_klient = k.id 
	INNER JOIN samochod s ON w.id_samochod = s.id
    WHERE w.data_odd IS NULL ORDER BY k.nazwisko, k.imie, w.data_wyp;
11.3 SELECT k.imie, k.nazwisko, w.data_wyp AS data_wplacenia_kaucji, w.kaucja FROM klient k INNER JOIN wypozyczenie w ON k.id = w.id_klient WHERE kaucja IS NOT NULL;

12 Z³¹czenia wewnêtrzne wiêkszej liczby tabel
12.1 SELECT k.imie, k.nazwisko, s.marka, s.typ, w.data_wyp FROM wypozyczenie w
	RIGHT JOIN klient k ON w.id_klient = k.id 
	INNER JOIN samochod s ON w.id_samochod = s.id
     WHERE w.data_odd IS NOT NULL ORDER BY k.nazwisko, k.imie, s.marka, s.typ;
12.2  SELECT m.ulica, m.numer, s.marka, s.typ FROM wypozyczenie w
	RIGHT JOIN miejsce m ON w.id_miejsca_wyp = m.id
    INNER JOIN samochod s ON w.id_samochod = s.id
    WHERE w.data_wyp IS NOT NULL  GROUP BY m.ulica, m.numer, s.marka, s.typ;
12.3 

13 Funkcje agreguj¹ce bez grupowania
13.1 SELECT MAX(pensja) FROM pracownik;
13.2 SELECT ROUND(AVG(pensja),2 ) FROM pracownik;
13.3 SELECT MIN(data_prod) FROM samochod;

14 Podzapytania nieskorelowane z u¿yciem funkcji agreguj¹cych bez
grupowania
14.1 SELECT imie, nazwisko, pensja FROM pracownik WHERE pensja = (SELECT MAX(pensja) FROM pracownik);
14.2 SELECT imie, nazwisko, pensja FROM pracownik WHERE pensja > (SELECT AVG(pensja) FROM pracownik);
14.3 SELECT marka, typ, data_prod FROM samochod WHERE data_prod = (SELECT MIN(data_prod) FROM samochod);

15 Podzapytania nieskorelowane z predykatem IN
15.1 SELECT s.marka, s.typ, s.data_prod FROM samochod s WHERE id NOT IN(SELECT id_samochod FROM wypozyczenie WHERE data_wyp IS NOT NULL);
15.2 SELECT imie, nazwisko FROM klient WHERE id NOT IN(SELECT id_klient FROM wypozyczenie WHERE data_wyp IS NOT NULL) GROUP BY nazwisko, imie;
15.3 SELECT imie,nazwisko FROM pracownik WHERE id NOT IN (SELECT id_pracow_wyp FROM wypozyczenie WHERE data_wyp IS NOT NULL);

16 Modyfikacja danych w bazie danych (UPDATE)
16.1 UPDATE pracownik SET dodatek = "50" WHERE dodatek IS NULL;
16.2 UPDATE klient SET imie="JERZY", nazwisko="NOWAK" WHERE id=10;
16.3 update pracownik p inner join(select avg(pensja) AS avg_prac from pracownik ) b set p.pensja = 1.1 * p.pensja  where p.pensja < b.avg_prac;


17 Usuwanie danych z bazy danych (DELETE)
17.1 DELETE FROM klient WHERE id=17;
17.2 DELETE FROM wypozyczenie WHERE id_klient =17;
17.3 Usun¹æ klientów, którzy nie wypo¿yczyli ¿adnego samochodu. 
	DELETE FROM klient WHERE id NOT IN(SELECT id_klient FROM wypozyczenie WHERE data_wyp IS NOT NULL);


18 Dodawanie danych do bazy danych (INSERT)
18.1 INSERT INTO klient VALUES(21, 'Adam', 'Cichy',null,null, "Korzenna",12,"Warszawa","00-950",null, "123-454-321");
18.2 INSERT INTO samochod VALUES(19, 'SKODA', 'OCTAVIA', '2012-09-01',"SREBRNY",1896,5000);
18.3 INSERT INTO wypozyczenie (id, id_klient, id_samochod, id_pracow_wyp, id_pracow_odd, id_miejsca_wyp, id_miejsca_odd, data_wyp, data_odd, kaucja, cena_jedn) VALUES(26,21,19,1,null,2,null,"2012-10-28",null,4000,500);

19 Wybrane funkcje daty i czasu (DAY, MONTH, YEAR, GETDATE,
DATEDIFF)
19.1 SELECT imie, nazwisko, data_zatr FROM pracownik WHERE data_zatr LIKE "%-05-%" GROUP BY nazwisko,imie;
lub: SELECT * FROM pracownik WHERE EXTRACT(MONTH FROM data_zatr)='05';
19.2 
19.3  


20 Wybrane funkcje operuj¹ce na napisach (LEFT, RIGHT, LEN,
UPPER, LOWER, STUFF)
20.1 SELECT imie, nazwisko, CONCAT(LEFT(imie,1), LEFT(nazwisko,1) )as inicjaly FROM klient;
20.2 SELECT imie, nazwisko, CONCAT(UPPER(LEFT(imie,1)), LOWER(SUBSTRING(imie,2,CHAR_LENGTH(imie)-1)) )as Imie, CONCAT(UPPER(LEFT(nazwisko,1)), LOWER(SUBSTRING(nazwisko,2,CHAR_LENGTH(nazwisko)-1)) )as Nazwisko FROM klient;
20.3 SELECT imie, nazwisko, CONCAT(SUBSTRING(nr_karty_kredyt,1,5), "xxxxxx") AS zaszyfrowana FROM klient WHERE nr_karty_kredyt IS NOT NULL;




